[
    {
        "dialog_node": "welcome",
        "title": "Welcome",
        "conditions": "($command == \"startquest\") and !(#READY_FOR_TUTORIAL)",
        "output": {
            "text": {
                "values": [
                    "Hello, I would like to get from you a description of your travel behavior. I will try to store your behavior patterns to help you choose what route to take and to offer you assistance in places or situations where you might need it. Next part will be the tutorial, are you ready?",
                    "Hello, I would like to get from you a description of your travel behavior. I will try to store your behavior patterns to help you choose what route to take and to offer you assistance in places or situations where you might need it. Next part will be the tutorial, are you ready?"
                ],
                "selection_policy": "random"
            }
        },
        "context": {
            "repeat": "<? output.text ?>",
            "example": "",
            "paraphrase": "Hi, I would like to get from you a description of your travel behavior. Can we start with tutorial?"
        },
        "type": "standard"
    },
    {
        "dialog_node": "ready to start tutorial",
        "title": "Ready to start tutorial",
        "conditions": "#READY_FOR_TUTORIAL",
        "output": {
            "text": {
                "values": "At first I would like to inform you that you can always ask me for an explanation. If you will not understand something, you can ask for repetition or I will try to rephrase my question. This six step tutorial should give you overview of how the system works, can we go next?",
                "selection_policy": "random"
            }
        },
        "context": {
            "command": "",
            "example": "Other people said that different routes to a train station are: going only on foot, going by tram number 9 or taking a taxi. Can I continue?",
            "tutorialFinished": "false",
            "tutorialIterator": -1,
            "tutorial": {
                "steps": [
                    {
                        "instruction": "In the beginning, we will talk about the different routes to some destination. For example, different routes to an airport are: going only by bus number 20, going by bus number 10 and train or taking a taxi. Can I continue?",
                        "example": "For example, different routes to an airport are: going only by bus number 20, going by bus number 10 and train or taking a taxi."
                    },
                    {
                        "instruction": "For each route I will ask you about your personal values,  because I would like to better understand what is important to you. Choosing some route can positively or negatively support some of these values. You can choose the values of: comfort, health, independence, safety, socializing, time-management and wealth, or say ‘no value’ if it’s none of them.",
                        "example": "For example, when you choose to order a food by delivery service it can positively support comfort and time-management, but it can negatively support independence and socializing values."
                    },
                    {
                        "instruction": "I will also ask you about activities which are part of the routes you take to destination. Specifically about the activities where some assistance or help would be useful to you.",
                        "example": "Activities, where assistance might be helpful for the route going by bus to an airport, could be: finding the bus stop, getting on the bus, crossing the street, and walking from the bus to the entrance."
                    },
                    {
                        "instruction": "System can fully help you with some activities, for example finding where you are or identifying which way to continue. With crossing the street the system cannot fully help you, it can only help with identifying the type of crossing. So I will also ask if you can do this activity or not and how difficult it would be. For activities where system can not help you at all, I will ask If you are able to do it alone or you need to ask someone else to help.",
                        "example": "You might receive assistance from the system, for instance you can get more detailed information about your route, system can now help mainly outdoors on the street. Sometimes you might also have to ask for assistance from someone else on the street to continue safely."
                    },
                    {
                        "instruction": "It is all from the tutorial, now we can start with the description of your travel behavior. Please say if you are ready.",
                        "example": ""
                    }
                ]
            }
        },
        "previous_sibling": "welcome",
        "type": "standard"
    },
    {
        "dialog_node": "tutorial_next",
        "title": "Tutorial next",
        "conditions": "#COMMON_CONTROL_NEXT or #TUTORIAL_NEXT",
        "context": {
            "repeat": "<? output.text ?>",
            "example": "",
            "paraphrase": "I am trying to explain how the description of your travelling behavior will work.",
            "tutorialIterator": "<? $tutorialIterator = T(java.lang.Math).min($tutorialIterator + 1, $tutorial.steps.size()-1) ?>"
        },
        "next_step": {
            "dialog_node": "tutorial_step_output",
            "behavior": "jump_to",
            "selector": "body"
        },
        "previous_sibling": "ready to start tutorial",
        "type": "standard"
    },
    {
        "dialog_node": "tutorial_repeat",
        "title": "Tutorial repeat",
        "conditions": "#TUTORIAL_REPEAT or #COMMON_REPEAT",
        "context": {
            "repeat": "<? output.text ?>",
            "example": "",
            "paraphrase": "I just repeated the current tutorial step."
        },
        "next_step": {
            "dialog_node": "tutorial_step_output",
            "behavior": "jump_to",
            "selector": "body"
        },
        "previous_sibling": "tutorial_next",
        "type": "standard"
    },
    {
        "dialog_node": "cooking_previous",
        "title": "Tutorial previous",
        "conditions": "#COMMON_CONTROL_PREVIOUS",
        "context": {
            "repeat": "<? output.text ?>",
            "example": "",
            "paraphrase": "I just told you the previous step.",
            "tutorialIterator": "<? $tutorialIterator = T(java.lang.Math).max($tutorialIterator - 1, 0) ?>"
        },
        "next_step": {
            "dialog_node": "tutorial_step_output",
            "behavior": "jump_to",
            "selector": "body"
        },
        "previous_sibling": "tutorial_repeat",
        "type": "standard"
    },
    {
        "dialog_node": "tutorial_step_output",
        "title": "tutorial step output",
        "conditions": "false",
        "output": {
            "text": "<? $tutorial.steps[$tutorialIterator].instruction ?>"
        },
        "context": {
            "repeat": "<? output.text ?>",
            "example": "<? $tutorial.steps[$tutorialIterator].example ?>"
        },
        "previous_sibling": "cooking_previous",
        "type": "standard"
    },
    {
        "dialog_node": "tutorial_finish",
        "title": "Finished tutorial node",
        "conditions": "#TUTORIAL_ALREADY_FINISHED",
        "output": {
            "text": "<? $tutorial.steps[$tutorialIterator].instruction ?>"
        },
        "context": {
            "tutorialFinished": "true",
            "repeat": "<? output.text ?>",
            "example": "",
            "paraphrase": "I just told you the last step.",
            "tutorialIterator": "<? $tutorialIterator = $tutorial.steps.size()-1 ?>"
        },
        "previous_sibling": "tutorial_step_output",
        "type": "standard"
    },
    {
        "dialog_node": "concretisation",
        "title": "concret",
        "type": "standard",
        "conditions": "$command == \"concret\" and !(#USER_DESCRIBING_WAYS)",
        "output": {
            "text": {
                "values": [
                    "Let’s talk about your traveling to <?$concret?> on your own. Pick a destination where you have more than one option of how to get there. Please go one by one, what is the first route you can take to <?$concret?>?",
                    "Other people for example said that different routes to a train station are: going only on foot, going by tram number 9 or taking a taxi. What is the first route you can take to <?$concret?>?"
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "concret_array": "<? new JsonArray() ?>"
        },
        "previous_sibling": "tutorial_finish",
        "digress_in": "does_not_return"
    },
    {
        "dialog_node": "store_ways_of",
        "title": "store ways of",
        "type": "standard",
        "conditions": "(intents[0].confidence < 0.5) or #USER_DESCRIBING_WAYS",
        "context": {
            "concret_value": "<?input.text?>"
        },
        "next_step": {
            "dialog_node": "first_child",
            "behavior": "skip_user_input",
            "selector": "user_input"
        },
        "parent": "concretisation"
    },
    {
        "dialog_node": "repeat_answer_way_of",
        "title": "Repeat answer - way of",
        "conditions": "$concret_value",
        "output": {
            "text": {
                "values": [
                    "You said that route you take to <?$concret?> is: <?$concret_value?>. Is it correct?"
                ]
            }
        },
        "parent": "store_ways_of",
        "type": "standard"
    },
    {
        "dialog_node": "correct_answer_way_of",
        "title": "Correct answer - way of",
        "conditions": "@yes_no:yes",
        "output": {
            "text": {
                "values": [
                    "Great, what is the next route you can take to <?$concret?>? Say thats all, when you are done."
                ]
            }
        },
        "context": {
            "concret_array": "<?$concret_array.append($concret_value)?>"
        },
        "next_step": {
            "dialog_node": "store_ways_of",
            "behavior": "jump_to",
            "selector": "user_input"
        },
        "parent": "repeat_answer_way_of",
        "type": "standard"
    },
    {
        "dialog_node": "incorrect_answer_way_of",
        "title": "Incorrect answer - way of",
        "conditions": "@yes_no:no",
        "output": {
            "text": {
                "values": [
                    "Oh sorry, let's try it again. What is the next route you can take to <?$concret?>?"
                ]
            }
        },
        "next_step": {
            "dialog_node": "store_ways_of",
            "behavior": "jump_to",
            "selector": "user_input"
        },
        "parent": "repeat_answer_way_of",
        "previous_sibling": "correct_answer_way_of",
        "type": "standard"
    },
    {
        "dialog_node": "that_is_all_ways_of",
        "title": "Thats all - ways of",
        "type": "standard",
        "conditions": "#THATSALL or #NOROUTE",
        "output": {},
        "parent": "concretisation",
        "previous_sibling": "store_ways_of"
    },
    {
        "dialog_node": "no_way_of",
        "title": "No way of",
        "type": "response_condition",
        "conditions": "$concret_array.size() == 0",
        "output": {
            "text": {
                "values": [
                    "You said that there are no routes to: <?$concret?>, is it correct?"
                ],
                "selection_policy": "sequential"
            }
        },
        "parent": "that_is_all_ways_of"
    },
    {
        "dialog_node": "only_one_way_of",
        "title": "Only one way of",
        "type": "response_condition",
        "conditions": "$concret_array.size() == 1",
        "output": {
            "text": {
                "values": [
                    "You said that route you take to <?$concret?> is: <?$concret_array.join(', ')?>. Is that correct?"
                ],
                "selection_policy": "sequential"
            }
        },
        "parent": "that_is_all_ways_of",
        "previous_sibling": "no_way_of"
    },
    {
        "dialog_node": "more_ways_of",
        "title": "More ways of",
        "type": "response_condition",
        "conditions": "$concret_array.size() > 1",
        "output": {
            "text": {
                "values": [
                    "You said that different routes you take to <?$concret?> are: <?$concret_array.join(', ')?>. Is that correct?"
                ]
            }
        },
        "parent": "that_is_all_ways_of",
        "previous_sibling": "only_one_way_of"
    },
    {
        "dialog_node": "correct all ways of",
        "title": "correct_all_ways",
        "type": "standard",
        "conditions": "@yes_no:yes",
        "output": {
            "text": {
                "values": [
                    "Great.",
                    "Perfect.",
                    "Thanks."
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "correct": "true"
        },
        "parent": "that_is_all_ways_of",
        "previous_sibling": "more_ways_of"
    },
    {
        "dialog_node": "incorrect all ways of",
        "title": "incorrect_all_ways",
        "type": "standard",
        "conditions": "anything_else",
        "output": {
            "text": {
                "values": [
                    "Sorry, let's try it again.",
                    "No worries, let's try it again."
                ],
                "selection_policy": "sequential"
            }
        },
        "next_step": {
            "dialog_node": "concretisation",
            "behavior": "jump_to",
            "selector": "body"
        },
        "parent": "that_is_all_ways_of",
        "previous_sibling": "correct all ways of"
    },
    {
        "dialog_node": "get_values_start",
        "title": "get values",
        "type": "standard",
        "conditions": "$command == \"value\"",
        "output": {
            "text": {
                "values": [
                    "Now I would like to ask you about your personal values when choosing different routes. This is the list of values that can be positively or negatively supported when choosing a route: comfort, health, independence, safety, socializing, time-management and wealth. You can also say none or no value. Can I continue?"
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "promoted_array": "<? new JsonArray() ?>",
            "demoted_array": "<? new JsonArray() ?>",
            "promoted_finished": "false",
            "demoted_finished": "false",
            "repeat": "<? output.text ?>"
        },
        "previous_sibling": "concretisation",
        "digress_in": "does_not_return",
        "digress_out": "allow_all"
    },
    {
        "dialog_node": "promoted_values",
        "title": "Promoted values",
        "conditions": "@yes_no:yes and $promoted_finished == \"false\"",
        "output": {
            "text": {
                "values": [
                    "What values from the list would generally be positively supported when you choose route: <?$value?> to: <?$concret?>?"
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "repeat": "<? output.text ?>"
        },
        "parent": "get_values_start",
        "type": "standard"
    },
    {
        "dialog_node": "does_not_know_promoted",
        "title": "None",
        "type": "standard",
        "conditions": "#does_not_know || @silence || #LIST_OF_VALUES",
        "output": {
            "text": {
                "values": [
                    "You can choose values in this list: <?$value_list.join(' ,')?>. You can also say none or no value."
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "repeat": "<? output.text ?>"
        },
        "metadata": {},
        "next_step": {
            "dialog_node": "get_values_start",
            "behavior": "jump_to",
            "selector": "body"
        },
        "parent": "promoted_values"
    },
    {
        "dialog_node": "no_promoted_values",
        "title": "No promoted values (noValues)",
        "type": "standard",
        "conditions": "#does_not_make_sense and !@value",
        "output": {
            "text": {
                "values": [
                    "You said there is no positively supported value. Can I continue next?"
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "repeat": "<? output.text ?>"
        },
        "metadata": {},
        "parent": "promoted_values",
        "previous_sibling": "does_not_know_promoted"
    },
    {
        "dialog_node": "continue_with_demoted",
        "title": "None",
        "type": "standard",
        "conditions": "@yes_no == 'yes'",
        "output": {
            "text": {
                "values": [
                    "OK."
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "promoted_finished": "true"
        },
        "metadata": {},
        "parent": "no_promoted_values"
    },
    {
        "dialog_node": "node_3_1518098783471",
        "title": "None",
        "type": "standard",
        "conditions": "anything_else",
        "output": {
            "text": {
                "values": [
                    "No worries, let's try it again."
                ],
                "selection_policy": "sequential"
            }
        },
        "metadata": {},
        "next_step": {
            "dialog_node": "get_values_start",
            "behavior": "jump_to",
            "selector": "body"
        },
        "parent": "no_promoted_values",
        "previous_sibling": "continue_with_demoted"
    },
    {
        "dialog_node": "store_promoted_values",
        "title": "store promoted values",
        "type": "frame",
        "conditions": "anything_else",
        "next_step": {
            "dialog_node": "first_child",
            "behavior": "skip_user_input",
            "selector": "user_input"
        },
        "parent": "promoted_values",
        "previous_sibling": "no_promoted_values"
    },
    {
        "dialog_node": "repeat_promoted_values",
        "title": "repeat promoted values",
        "type": "standard",
        "conditions": "anything_else",
        "output": {},
        "parent": "store_promoted_values",
        "digress_out": "allow_all"
    },
    {
        "dialog_node": "only_one_promoted",
        "title": "Only one promoted value",
        "type": "response_condition",
        "conditions": "$promoted_array.size() == 1",
        "output": {
            "text": {
                "values": [
                    "Is value <?$promoted_array.join(', ')?> promoted when choosing <?$value?> to: <?$concret?>?"
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "repeat": "<? output.text ?>"
        },
        "metadata": {},
        "parent": "repeat_promoted_values"
    },
    {
        "dialog_node": "more_promoted_values",
        "title": "More promoted values",
        "type": "response_condition",
        "conditions": "$promoted_array.size() > 1",
        "output": {
            "text": {
                "values": [
                    "Are values <?$promoted_array.join(', ')?> promoted when choosing <?$value?> to: <?$concret?>?"
                ]
            }
        },
        "context": {
            "repeat": "<? output.text ?>"
        },
        "metadata": {},
        "parent": "repeat_promoted_values",
        "previous_sibling": "only_one_promoted"
    },
    {
        "dialog_node": "correct_all_promoted",
        "title": "correct all promoted",
        "type": "standard",
        "conditions": "@yes_no == 'yes'",
        "output": {
            "text": {
                "values": [
                    "Great.",
                    "Perfect.",
                    "Thanks."
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "promoted_finished": "true"
        },
        "next_step": {
            "dialog_node": "demoted_values",
            "behavior": "jump_to",
            "selector": "condition"
        },
        "parent": "repeat_promoted_values",
        "previous_sibling": "more_promoted_values"
    },
    {
        "dialog_node": "incorrect_all_promoted",
        "title": "incorrect all promoted",
        "type": "standard",
        "conditions": "anything_else",
        "output": {
            "text": {
                "values": [
                    "Sorry, let's try it again.",
                    "No worries, let's try it again."
                ],
                "selection_policy": "sequential"
            }
        },
        "next_step": {
            "dialog_node": "promoted_values",
            "behavior": "jump_to",
            "selector": "body"
        },
        "parent": "repeat_promoted_values",
        "previous_sibling": "correct_all_promoted"
    },
    {
        "dialog_node": "node_66",
        "variable": "$promoted_array",
        "type": "slot",
        "parent": "store_promoted_values",
        "previous_sibling": "repeat_promoted_values"
    },
    {
        "dialog_node": "node_67",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:comfort",
        "context": {
            "promoted_array": "<?$promoted_array.append(\"comfort\")?>"
        },
        "parent": "node_66"
    },
    {
        "dialog_node": "node_68",
        "variable": "$promoted_array",
        "type": "slot",
        "parent": "store_promoted_values",
        "previous_sibling": "node_66"
    },
    {
        "dialog_node": "node_69",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:health",
        "context": {
            "promoted_array": "<?$promoted_array.append(\"health\")?>"
        },
        "parent": "node_68"
    },
    {
        "dialog_node": "node_70",
        "variable": "$promoted_array",
        "type": "slot",
        "parent": "store_promoted_values",
        "previous_sibling": "node_68"
    },
    {
        "dialog_node": "node_71",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:independence",
        "context": {
            "promoted_array": "<?$promoted_array.append(\"independence\")?>"
        },
        "parent": "node_70"
    },
    {
        "dialog_node": "node_72",
        "variable": "$promoted_array",
        "type": "slot",
        "parent": "store_promoted_values",
        "previous_sibling": "node_70"
    },
    {
        "dialog_node": "node_73",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:safety",
        "context": {
            "promoted_array": "<?$promoted_array.append(\"safety\")?>"
        },
        "parent": "node_72"
    },
    {
        "dialog_node": "node_74",
        "variable": "$promoted_array",
        "type": "slot",
        "parent": "store_promoted_values",
        "previous_sibling": "node_72"
    },
    {
        "dialog_node": "node_75",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:socializing",
        "context": {
            "promoted_array": "<?$promoted_array.append(\"socializing\")?>"
        },
        "parent": "node_74"
    },
    {
        "dialog_node": "node_76",
        "variable": "$promoted_array",
        "type": "slot",
        "parent": "store_promoted_values",
        "previous_sibling": "node_74"
    },
    {
        "dialog_node": "node_77",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:time-management",
        "context": {
            "promoted_array": "<?$promoted_array.append(\"time-management\")?>"
        },
        "parent": "node_76"
    },
    {
        "dialog_node": "node_78",
        "variable": "$promoted_array",
        "type": "slot",
        "parent": "store_promoted_values",
        "previous_sibling": "node_76"
    },
    {
        "dialog_node": "node_79",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:wealth",
        "context": {
            "promoted_array": "<?$promoted_array.append(\"wealth\")?>"
        },
        "parent": "node_78"
    },
    {
        "dialog_node": "demoted_values",
        "title": "Demoted values",
        "conditions": "$demoted_finished == \"false\" and $promoted_finished == \"true\"",
        "output": {
            "text": {
                "values": [
                    "What values from the list would generally be negatively supported when you choose route: <?$value?> to: <?$concret?>?"
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "repeat": "<? output.text ?>"
        },
        "parent": "get_values_start",
        "previous_sibling": "promoted_values",
        "type": "standard"
    },
    {
        "dialog_node": "does_not_know_demoted",
        "title": "None",
        "type": "standard",
        "conditions": "#does_not_know || @silence || #LIST_OF_VALUES",
        "output": {
            "text": {
                "values": [
                    "You can choose values in this list: <?$value_list.join(' ,')?>. You can also say none or no value."
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "repeat": "<? output.text ?>"
        },
        "metadata": {},
        "next_step": {
            "dialog_node": "get_values_start",
            "behavior": "jump_to",
            "selector": "body"
        },
        "parent": "demoted_values"
    },
    {
        "dialog_node": "no_demoted_values",
        "title": "No demoted values (noValues)",
        "type": "standard",
        "conditions": "#does_not_make_sense and !@value",
        "output": {
            "text": {
                "values": [
                    "You said there is no negatively supported values, is that correct?"
                ],
                "selection_policy": "sequential"
            }
        },
        "metadata": {},
        "parent": "demoted_values",
        "previous_sibling": "does_not_know_demoted"
    },
    {
        "dialog_node": "correct_no_demoted",
        "title": "Correct - no demoted",
        "type": "standard",
        "conditions": "@yes_no == 'yes'",
        "output": {
            "text": {
                "values": [
                    "Thank you, this is all regarding your personal values when choosing route: <?$value?> to: <?$concret?>"
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "demoted_finished": "true",
            "correct": "true",
            "repeat": "<? output.text ?>"
        },
        "metadata": {},
        "parent": "no_demoted_values"
    },
    {
        "dialog_node": "incorrect_no_demoted",
        "title": "Incorrect - no demoted",
        "type": "standard",
        "conditions": "anything_else",
        "output": {
            "text": {
                "values": [
                    "No worries, let's try it again."
                ],
                "selection_policy": "sequential"
            }
        },
        "metadata": {},
        "next_step": {
            "dialog_node": "get_values_start",
            "behavior": "jump_to",
            "selector": "body"
        },
        "parent": "no_demoted_values",
        "previous_sibling": "correct_no_demoted"
    },
    {
        "dialog_node": "store_demoted_values",
        "title": "store demoted values",
        "type": "frame",
        "conditions": "anything_else",
        "next_step": {
            "dialog_node": "first_child",
            "behavior": "skip_user_input",
            "selector": "user_input"
        },
        "parent": "demoted_values",
        "previous_sibling": "no_demoted_values"
    },
    {
        "dialog_node": "repeat_demoted_values",
        "title": "repeat demoted values",
        "type": "standard",
        "conditions": "anything_else",
        "output": {},
        "parent": "store_demoted_values",
        "digress_out": "allow_all"
    },
    {
        "dialog_node": "only_one_demoted",
        "title": "Only one demoted value",
        "type": "response_condition",
        "conditions": "$demoted_array.size() == 1",
        "output": {
            "text": {
                "values": [
                    "Is value <?$demoted_array.join(', ')?> demoted when choosing <?$value?> to: <?$concret?>?"
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "repeat": "<? output.text ?>"
        },
        "metadata": {},
        "parent": "repeat_demoted_values"
    },
    {
        "dialog_node": "more_demoted_values",
        "title": "More demoted values",
        "type": "response_condition",
        "conditions": "$demoted_array.size() > 1",
        "output": {
            "text": {
                "values": [
                    "Are values <?$demoted_array.join(', ')?> demoted when choosing <?$value?> to: <?$concret?>?"
                ]
            }
        },
        "context": {
            "repeat": "<? output.text ?>"
        },
        "metadata": {},
        "parent": "repeat_demoted_values",
        "previous_sibling": "only_one_demoted"
    },
    {
        "dialog_node": "correct_all_demoted",
        "title": "correct all demoted",
        "type": "standard",
        "conditions": "@yes_no == 'yes'",
        "output": {
            "text": {
                "values": [
                    "Thank you, this is all regarding your personal values when choosing route: <?$value?> to: <?$concret?>"
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "demoted_finished": "true",
            "correct": "true",
            "repeat": "<? output.text ?>"
        },
        "parent": "repeat_demoted_values",
        "previous_sibling": "more_demoted_values"
    },
    {
        "dialog_node": "incorrect_all_demoted",
        "title": "incorrect all demoted",
        "type": "standard",
        "conditions": "anything_else",
        "output": {
            "text": {
                "values": [
                    "Sorry, let's try it again.",
                    "No worries, let's try it again."
                ],
                "selection_policy": "sequential"
            }
        },
        "next_step": {
            "dialog_node": "demoted_values",
            "behavior": "jump_to",
            "selector": "body"
        },
        "parent": "repeat_demoted_values",
        "previous_sibling": "correct_all_demoted"
    },
    {
        "dialog_node": "node_80",
        "variable": "$demoted_array",
        "type": "slot",
        "parent": "store_demoted_values",
        "previous_sibling": "repeat_demoted_values"
    },
    {
        "dialog_node": "node_81",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:comfort",
        "context": {
            "demoted_array": "<?$demoted_array.append(\"comfort\")?>"
        },
        "parent": "node_80"
    },
    {
        "dialog_node": "node_82",
        "variable": "$demoted_array",
        "type": "slot",
        "parent": "store_demoted_values",
        "previous_sibling": "node_80"
    },
    {
        "dialog_node": "node_83",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:health",
        "context": {
            "demoted_array": "<?$demoted_array.append(\"health\")?>"
        },
        "parent": "node_82"
    },
    {
        "dialog_node": "node_84",
        "variable": "$demoted_array",
        "type": "slot",
        "parent": "store_demoted_values",
        "previous_sibling": "node_82"
    },
    {
        "dialog_node": "node_85",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:independence",
        "context": {
            "demoted_array": "<?$demoted_array.append(\"independence\")?>"
        },
        "parent": "node_84"
    },
    {
        "dialog_node": "node_86",
        "variable": "$demoted_array",
        "type": "slot",
        "parent": "store_demoted_values",
        "previous_sibling": "node_84"
    },
    {
        "dialog_node": "node_87",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:safety",
        "context": {
            "demoted_array": "<?$demoted_array.append(\"safety\")?>"
        },
        "parent": "node_86"
    },
    {
        "dialog_node": "node_88",
        "variable": "$demoted_array",
        "type": "slot",
        "parent": "store_demoted_values",
        "previous_sibling": "node_86"
    },
    {
        "dialog_node": "node_89",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:socializing",
        "context": {
            "demoted_array": "<?$demoted_array.append(\"socializing\")?>"
        },
        "parent": "node_88"
    },
    {
        "dialog_node": "node_90",
        "variable": "$demoted_array",
        "type": "slot",
        "parent": "store_demoted_values",
        "previous_sibling": "node_88"
    },
    {
        "dialog_node": "node_91",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:time-management",
        "context": {
            "demoted_array": "<?$demoted_array.append(\"time-management\")?>"
        },
        "parent": "node_90"
    },
    {
        "dialog_node": "node_92",
        "variable": "$demoted_array",
        "type": "slot",
        "parent": "store_demoted_values",
        "previous_sibling": "node_90"
    },
    {
        "dialog_node": "node_93",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:wealth",
        "context": {
            "demoted_array": "<?$demoted_array.append(\"wealth\")?>"
        },
        "parent": "node_92"
    },
    {
        "dialog_node": "parts_of",
        "title": "parto",
        "type": "standard",
        "conditions": "$command == \"parto\"",
        "output": {
            "text": {
                "values": [
                    "Now let’s talk about activities where assistance might be helpful. Please go one by one, what is the first activity you do when you choose route <?$parto?> to <?$concret?> and where assistance could be helpful?",
                    "For example, activities, where assistance might be helpful for the route going by bus to an airport, could be: finding the bus stop, getting on the bus, crossing the street, and walking from the bus to the entrance. What is the first activity you do when choose route <?$parto?> to <?$concret?> and where assistance could be helpful?"
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "parto_array": "<? new JsonArray() ?>"
        },
        "previous_sibling": "get_values_start",
        "digress_in": "does_not_return"
    },
    {
        "dialog_node": "store_parts_of",
        "title": "store parts of",
        "type": "standard",
        "conditions": "(intents[0].confidence < 0.5) or #USER_DESCRIBING_PARTS",
        "context": {
            "parto_value": "<?input.text?>"
        },
        "next_step": {
            "dialog_node": "first_child",
            "behavior": "skip_user_input",
            "selector": "user_input"
        },
        "parent": "parts_of"
    },
    {
        "dialog_node": "repeat_answer_part_of",
        "title": "Repeat answer - part of",
        "conditions": "$parto_value",
        "output": {
            "text": {
                "values": [
                    "Ok, <?$parto_value?>. Is it correct?"
                ]
            }
        },
        "parent": "store_parts_of",
        "type": "standard"
    },
    {
        "dialog_node": "correct_answer_part_of",
        "title": "Correct answer - part of",
        "conditions": "@yes_no:yes",
        "output": {
            "text": {
                "values": [
                    "Great, you can say: that's all, when you are done. What is the next activity you do when you choose: <?$parto?> to <?$concret?> and where assistance could be helpful?",
                    "Great. What is the next activity you do when you choose: <?$parto?> to <?$concret?> and where you might need help?",
                    "Great, what is the next activity? Say thats all, when you are done."
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "parto_array": "<?$parto_array.append($parto_value)?>"
        },
        "next_step": {
            "dialog_node": "store_parts_of",
            "behavior": "jump_to",
            "selector": "user_input"
        },
        "parent": "repeat_answer_part_of",
        "type": "standard"
    },
    {
        "dialog_node": "incorrect_answer_part_of",
        "title": "Incorrect answer - part of",
        "conditions": "@yes_no:no",
        "output": {
            "text": {
                "values": [
                    "Oh sorry, let's try it again. what is the next activity you do when you choose: <?$parto?> to <?$concret?> and where assistance could be helpful?",
                    "Sorry, let's try it again. What is the next activity, where assistance could be helpful?"
                ],
                "selection_policy": "sequential"
            }
        },
        "next_step": {
            "dialog_node": "store_parts_of",
            "behavior": "jump_to",
            "selector": "user_input"
        },
        "parent": "repeat_answer_part_of",
        "previous_sibling": "correct_answer_part_of",
        "type": "standard"
    },
    {
        "dialog_node": "that_is_all_parts_of",
        "title": "Thats all - parts of",
        "type": "standard",
        "conditions": "#THATSALL or #NOACTIVITY",
        "output": {},
        "parent": "parts_of",
        "previous_sibling": "store_parts_of",
        "digress_out": "allow_all"
    },
    {
        "dialog_node": "no_part_of",
        "title": "No part of",
        "type": "response_condition",
        "conditions": "$parto_array.size() == 0",
        "output": {
            "text": {
                "values": [
                    "You said that there are no acitivites where assistance might be helpful, is it correct?"
                ],
                "selection_policy": "sequential"
            }
        },
        "parent": "that_is_all_parts_of"
    },
    {
        "dialog_node": "only_one_part_of",
        "title": "Only one part of",
        "type": "response_condition",
        "conditions": "$parto_array.size() == 1",
        "output": {
            "text": {
                "values": [
                    "To be sure, I will repeat it. The activity when you choose route: <?$parto?> to <?$concret?> and assistance might be helpful is: <?$parto_array.join(', ')?>, is it correct?"
                ],
                "selection_policy": "sequential"
            }
        },
        "parent": "that_is_all_parts_of",
        "previous_sibling": "no_part_of"
    },
    {
        "dialog_node": "more_parts_of",
        "title": "More parts of",
        "type": "response_condition",
        "conditions": "$parto_array.size() > 1",
        "output": {
            "text": {
                "values": [
                    "To be sure, I will repeat it. Different activities when you choose route: <?$parto?> to <?$concret?> and assistance might be helpful are: <?$parto_array.join(', ')?>, is it correct?"
                ]
            }
        },
        "parent": "that_is_all_parts_of",
        "previous_sibling": "only_one_part_of"
    },
    {
        "dialog_node": "correct all parts of",
        "title": "correct_all_parts",
        "type": "standard",
        "conditions": "@yes_no:yes",
        "output": {
            "text": {
                "values": [
                    "Great.",
                    "Perfect.",
                    "Thanks."
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "correct": "true"
        },
        "parent": "that_is_all_parts_of",
        "previous_sibling": "more_parts_of"
    },
    {
        "dialog_node": "incorrect all parts of",
        "title": "incorrect_all_parts",
        "type": "standard",
        "conditions": "anything_else",
        "output": {
            "text": {
                "values": [
                    "Sorry, let's try it again.",
                    "No worries, let's try it again."
                ],
                "selection_policy": "sequential"
            }
        },
        "next_step": {
            "dialog_node": "parts_of",
            "behavior": "jump_to",
            "selector": "body"
        },
        "parent": "that_is_all_parts_of",
        "previous_sibling": "correct all parts of"
    },
    {
        "dialog_node": "support_partly",
        "title": "User capability for partly supported",
        "conditions": "$command == \"usercappart\"",
        "output": {
            "text": {
                "values": [
                    "Let's talk about system support and your cappabilities."
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "capable_array": "<? new JsonArray() ?>",
            "sometimes_array": "<? new JsonArray() ?>",
            "notcapable_array": "<? new JsonArray() ?>",
            "iterator": 0
        },
        "next_step": {
            "dialog_node": "first_child",
            "behavior": "skip_user_input",
            "selector": "body"
        },
        "previous_sibling": "parts_of",
        "type": "standard"
    },
    {
        "dialog_node": "store_capability_partly",
        "title": "Store capability for partly supported",
        "conditions": "$iterator < $usercappart_array.size()",
        "output": {
            "text": {
                "values": [
                    "System can partly help with activities: <? $usercappart_array.join(', ') ?>. For activity: <? $usercappart_array.get($iterator) ?>, system can help with: <? $support_descriptions.get($iterator) ?>. Would you be able to complete the activity if system do this, or not?",
                    "For activity: <? $usercappart_array.get($iterator) ?>, system can help with <? $support_descriptions.get($iterator) ?>. Would you be able to complete the activity if system do this, or not?"
                ]
            }
        },
        "parent": "support_partly",
        "type": "standard"
    },
    {
        "dialog_node": "capable_partly_support",
        "title": "User capable (partly support)",
        "conditions": "@yes_no:yes or input.text.contains('slower') or input.text.contains('but slower')",
        "output": {
            "text": {
                "values": [
                    "OK, thanks.",
                    "OK.",
                    "Thanks."
                ]
            }
        },
        "context": {
            "capable_array": "<? $capable_array.append($usercappart_array.get($iterator - 1)) ?>",
            "iterator": "<?$iterator + 1?>"
        },
        "next_step": {
            "dialog_node": "store_capability_partly",
            "behavior": "jump_to",
            "selector": "condition"
        },
        "parent": "store_capability_partly",
        "type": "standard"
    },
    {
        "dialog_node": "sometimes_capable_partly_support",
        "title": "User sometimes capable (partly support)",
        "conditions": "@maybe",
        "output": {
            "text": {
                "values": [
                    "OK, thanks.",
                    "OK.",
                    "Thanks."
                ]
            }
        },
        "context": {
            "sometimes_array": "<? $sometimes_array.append($usercappart_array.get($iterator - 1)) ?>",
            "iterator": "<?$iterator + 1?>"
        },
        "next_step": {
            "dialog_node": "store_capability_partly",
            "behavior": "jump_to",
            "selector": "condition"
        },
        "parent": "store_capability_partly",
        "previous_sibling": "capable_partly_support",
        "type": "standard"
    },
    {
        "dialog_node": "notcapable_partly_support",
        "title": "User notcapable (partly support)",
        "conditions": "@yes_no:no or (input.text.contains('not') or input.text.contains('could not') or input.text.contains('cannot'))",
        "output": {
            "text": {
                "values": [
                    "OK, thanks.",
                    "OK.",
                    "Thanks."
                ]
            }
        },
        "context": {
            "notcapable_array": "<? $notcapable_array.append($usercappart_array.get($iterator - 1)) ?>",
            "iterator": "<?$iterator + 1?>"
        },
        "next_step": {
            "dialog_node": "store_capability_partly",
            "behavior": "jump_to",
            "selector": "condition"
        },
        "parent": "store_capability_partly",
        "previous_sibling": "sometimes_capable_partly_support",
        "type": "standard"
    },
    {
        "dialog_node": "anything_else_partly_support",
        "title": "Fallback (partly support)",
        "conditions": "intents[0].confidence < 0.5 or anything_else",
        "output": {
            "text": {
                "values": [
                    "Please choose from these answers: Yes, or Maybe sometimes, or No, I could not."
                ]
            }
        },
        "next_step": {
            "dialog_node": "store_capability_partly",
            "behavior": "jump_to",
            "selector": "condition"
        },
        "parent": "store_capability_partly",
        "previous_sibling": "notcapable_partly_support",
        "type": "standard"
    },
    {
        "dialog_node": "no_partly_supported",
        "title": "No partly supported.",
        "conditions": "$usercappart_array.size() == 0",
        "output": {
            "text": "Unfortunately, there are no activities system can partly help you with."
        },
        "context": {
            "correct": "true"
        },
        "parent": "support_partly",
        "previous_sibling": "store_capability_partly",
        "type": "standard"
    },
    {
        "dialog_node": "all_partly_stored",
        "title": "All partly stored",
        "conditions": "$iterator == $usercappart_array.size()",
        "output": {
            "text": "I have it all."
        },
        "context": {
            "correct": "true"
        },
        "parent": "support_partly",
        "previous_sibling": "no_partly_supported",
        "type": "standard"
    },
    {
        "dialog_node": "support_not",
        "title": "User capability for not supported",
        "conditions": "$command == \"usercapnot\"",
        "output": {
            "text": {
                "values": [
                    "System can not help you with activities: <? $usercapnot_array.join(', ') ?>."
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "capable_array": "<? new JsonArray() ?>",
            "sometimes_array": "<? new JsonArray() ?>",
            "notcapable_array": "<? new JsonArray() ?>",
            "iterator": 0
        },
        "next_step": {
            "dialog_node": "first_child",
            "behavior": "skip_user_input",
            "selector": "body"
        },
        "previous_sibling": "support_partly",
        "type": "standard"
    },
    {
        "dialog_node": "store_notcapable",
        "title": "Store capability for not supported",
        "conditions": "$iterator < $usercapnot_array.size()",
        "output": {
            "text": {
                "values": [
                    "For activity: <? $usercapnot_array.get($iterator) ?>, system can not help. Would you be able to complete this activity alone, or would you need to ask someone else to help?"
                ]
            }
        },
        "parent": "support_not",
        "type": "standard"
    },
    {
        "dialog_node": "capable_no_support",
        "title": "User capable (no support)",
        "conditions": "@yes_no:yes or input.text.contains('slower') or input.text.contains('but slower')",
        "output": {
            "text": {
                "values": [
                    "OK, thanks.",
                    "OK.",
                    "Thanks."
                ]
            }
        },
        "context": {
            "capable_array": "<? $capable_array.append($usercapnot_array.get($iterator - 1)) ?>",
            "iterator": "<?$iterator + 1?>"
        },
        "next_step": {
            "dialog_node": "store_notcapable",
            "behavior": "jump_to",
            "selector": "condition"
        },
        "parent": "store_notcapable",
        "type": "standard"
    },
    {
        "dialog_node": "sometimes_capable_no_support",
        "title": "User sometimes capable (no support)",
        "conditions": "@maybe",
        "output": {
            "text": {
                "values": [
                    "OK, thanks.",
                    "OK.",
                    "Thanks."
                ]
            }
        },
        "context": {
            "sometimes_array": "<? $sometimes_array.append($usercapnot_array.get($iterator - 1)) ?>",
            "iterator": "<?$iterator + 1?>"
        },
        "next_step": {
            "dialog_node": "store_notcapable",
            "behavior": "jump_to",
            "selector": "condition"
        },
        "parent": "store_notcapable",
        "previous_sibling": "capable_no_support",
        "type": "standard"
    },
    {
        "dialog_node": "notcapable_no_support",
        "title": "User notcapable (no support)",
        "conditions": "@yes_no:no or (input.text.contains('ask') or input.text.contains('someone'))",
        "output": {
            "text": {
                "values": [
                    "OK, thanks.",
                    "OK.",
                    "Thanks."
                ]
            }
        },
        "context": {
            "notcapable_array": "<? $notcapable_array.append($usercapnot_array.get($iterator - 1)) ?>",
            "iterator": "<?$iterator + 1?>"
        },
        "next_step": {
            "dialog_node": "store_notcapable",
            "behavior": "jump_to",
            "selector": "condition"
        },
        "parent": "store_notcapable",
        "previous_sibling": "sometimes_capable_no_support",
        "type": "standard"
    },
    {
        "dialog_node": "anything_else_no_support",
        "title": "Fallback (no support)",
        "conditions": "intents[0].confidence < 0.5 or anything_else",
        "output": {
            "text": {
                "values": [
                    "Please choose from these answers: Yes, but slower, or Maybe, or No I need to ask someone"
                ]
            }
        },
        "next_step": {
            "dialog_node": "store_notcapable",
            "behavior": "jump_to",
            "selector": "condition"
        },
        "parent": "store_notcapable",
        "previous_sibling": "notcapable_no_support",
        "type": "standard"
    },
    {
        "dialog_node": "no_not_supported",
        "title": "No not supported.",
        "conditions": "$usercapnot_array.size() == 0",
        "output": {
            "text": "There are no activities system can not help you with."
        },
        "context": {
            "correct": "true"
        },
        "parent": "support_not",
        "previous_sibling": "store_notcapable",
        "type": "standard"
    },
    {
        "dialog_node": "all_partly_stored_no_support",
        "title": "All partly stored",
        "conditions": "$iterator == $usercapnot_array.size()",
        "output": {
            "text": "I have it all."
        },
        "context": {
            "correct": "true"
        },
        "parent": "support_not",
        "previous_sibling": "no_not_supported",
        "type": "standard"
    },
    {
        "dialog_node": "values_support_intro",
        "title": "Values about support intro",
        "conditions": "$command == \"valuesupport\"",
        "output": {
            "text": {
                "values": [
                    "Now, I would like to ask you about what values are positively or negatively supported for different types of assistance."
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "repeat": "<? output.text ?>",
            "promoted_values_support": "<? new JsonArray() ?>",
            "promoted_support_finished": "false",
            "demoted_values_support": "<? new JsonArray() ?>",
            "demoted_support_finished": "false",
            "iterator": 0,
            "support": {
                "types": [
                    {
                        "description": "The system would assist you when this is helpful",
                        "short_desc": "system would assist you",
                        "identificator": "system",
                        "promoted": "<? new JsonArray() ?>",
                        "demoted": "<? new JsonArray() ?>"
                    },
                    {
                        "description": "The system could not help you, so you had to do a more difficult action by yourself",
                        "short_desc": "you do the action alone",
                        "identificator": "alone",
                        "promoted": "<? new JsonArray() ?>",
                        "demoted": "<? new JsonArray() ?>"
                    },
                    {
                        "description": "The system could not help you, so you ask a stranger for help",
                        "short_desc": "you ask someone for help",
                        "identificator": "bystander",
                        "promoted": "<? new JsonArray() ?>",
                        "demoted": "<? new JsonArray() ?>"
                    }
                ]
            }
        },
        "previous_sibling": "support_not",
        "type": "standard"
    },
    {
        "dialog_node": "promoted_values_support",
        "title": "Promoted values for support",
        "conditions": "$promoted_support_finished == \"false\" and ($iterator < $support.types.size()) ",
        "output": {
            "text": {
                "values": [
                    "What values would be positively supported if: <?$support.types[$iterator].description?>. Choose values in this list: <?$value_list.join(', ')?>.",
                    "What values would be positively supported if: <?$support.types[$iterator].description?>."
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "repeat": "<? output.text ?>",
            "promoted_array": "<? new JsonArray() ?>"
        },
        "parent": "values_support_intro",
        "type": "standard"
    },
    {
        "dialog_node": "does_not_know_promoted_support",
        "title": "Does not know or silence",
        "type": "standard",
        "conditions": "#does_not_know || @silence || #LIST_OF_VALUES",
        "output": {
            "text": {
                "values": [
                    "You can choose values in this list: <?$value_list.join(', ')?>. You can also say none or no value."
                ],
                "selection_policy": "sequential"
            }
        },
        "next_step": {
            "dialog_node": "promoted_values_support",
            "behavior": "jump_to",
            "selector": "body"
        },
        "parent": "promoted_values_support"
    },
    {
        "dialog_node": "no_promoted_support_values",
        "title": "No promoted support values (noValues)",
        "type": "standard",
        "conditions": "#does_not_make_sense and !@value",
        "output": {
            "text": {
                "values": [
                    "You said there is no positively supported value. Can I continue next?"
                ],
                "selection_policy": "sequential"
            }
        },
        "parent": "promoted_values_support",
        "previous_sibling": "does_not_know_promoted_support"
    },
    {
        "dialog_node": "continue_with_demoted_support",
        "title": "None",
        "type": "standard",
        "conditions": "@yes_no == 'yes'",
        "output": {
            "text": {
                "values": [
                    "OK."
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "promoted_finished": "true"
        },
        "parent": "no_promoted_support_values"
    },
    {
        "dialog_node": "node_3_1518098783473",
        "title": "None",
        "type": "standard",
        "conditions": "anything_else",
        "output": {
            "text": {
                "values": [
                    "No worries, let's try it again."
                ],
                "selection_policy": "sequential"
            }
        },
        "metadata": {},
        "next_step": {
            "dialog_node": "values_support_intro",
            "behavior": "jump_to",
            "selector": "body"
        },
        "parent": "no_promoted_support_values",
        "previous_sibling": "continue_with_demoted_support"
    },
    {
        "dialog_node": "store_promoted_support_values",
        "title": "store promoted support values",
        "type": "frame",
        "conditions": "anything_else",
        "next_step": {
            "dialog_node": "first_child",
            "behavior": "skip_user_input",
            "selector": "user_input"
        },
        "parent": "promoted_values_support",
        "previous_sibling": "no_promoted_support_values"
    },
    {
        "dialog_node": "repeat_promoted_support_values",
        "title": "repeat promoted values",
        "type": "standard",
        "conditions": "anything_else",
        "parent": "store_promoted_support_values",
        "digress_out": "allow_all"
    },
    {
        "dialog_node": "only_one_promoted_support",
        "title": "Only one promoted value",
        "type": "response_condition",
        "conditions": "$promoted_array.size() == 1",
        "output": {
            "text": {
                "values": [
                    "Is value <?$promoted_array.join(', ')?> promoted when <?$support.types[$iterator].short_desc?>?"
                ],
                "selection_policy": "sequential"
            }
        },
        "metadata": {},
        "parent": "repeat_promoted_support_values"
    },
    {
        "dialog_node": "more_promoted_values_support",
        "title": "More promoted values",
        "type": "response_condition",
        "conditions": "$promoted_array.size() > 1",
        "output": {
            "text": {
                "values": [
                    "Are values <?$promoted_array.join(', ')?> promoted when <?$support.types[$iterator].short_desc?>?"
                ]
            }
        },
        "metadata": {},
        "parent": "repeat_promoted_support_values",
        "previous_sibling": "only_one_promoted_support"
    },
    {
        "dialog_node": "correct_all_promoted_support",
        "title": "correct all promoted support values",
        "type": "standard",
        "conditions": "@yes_no == 'yes'",
        "output": {
            "text": {
                "values": [
                    "Great.",
                    "Perfect.",
                    "Thanks."
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "promoted_support_finnished": "true",
            "demoted_support_finnished": "false",
            "temp": "<?$support.types[$iterator].promoted = $support.types[$iterator].promoted.append($promoted_array)?>"
        },
        "next_step": {
            "dialog_node": "demoted_values_support",
            "behavior": "jump_to",
            "selector": "body"
        },
        "parent": "repeat_promoted_support_values",
        "previous_sibling": "more_promoted_values_support"
    },
    {
        "dialog_node": "incorrect_all_promoted_support",
        "title": "incorrect all promoted",
        "type": "standard",
        "conditions": "anything_else",
        "output": {
            "text": {
                "values": [
                    "Sorry, let's try it again.",
                    "No worries, let's try it again."
                ],
                "selection_policy": "sequential"
            }
        },
        "next_step": {
            "dialog_node": "promoted_values_support",
            "behavior": "jump_to",
            "selector": "body"
        },
        "parent": "repeat_promoted_support_values",
        "previous_sibling": "correct_all_promoted_support"
    },
    {
        "dialog_node": "node_94",
        "variable": "$promoted_array",
        "type": "slot",
        "parent": "store_promoted_support_values",
        "previous_sibling": "repeat_promoted_support_values"
    },
    {
        "dialog_node": "node_95",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:comfort",
        "context": {
            "promoted_array": "<?$promoted_array.append(\"comfort\")?>"
        },
        "parent": "node_94"
    },
    {
        "dialog_node": "node_96",
        "variable": "$promoted_array",
        "type": "slot",
        "parent": "store_promoted_support_values",
        "previous_sibling": "node_94"
    },
    {
        "dialog_node": "node_97",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:health",
        "context": {
            "promoted_array": "<?$promoted_array.append(\"health\")?>"
        },
        "parent": "node_96"
    },
    {
        "dialog_node": "node_98",
        "variable": "$promoted_array",
        "type": "slot",
        "parent": "store_promoted_support_values",
        "previous_sibling": "node_96"
    },
    {
        "dialog_node": "node_99",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:independence",
        "context": {
            "promoted_array": "<?$promoted_array.append(\"independence\")?>"
        },
        "parent": "node_98"
    },
    {
        "dialog_node": "node_100",
        "variable": "$promoted_array",
        "type": "slot",
        "parent": "store_promoted_support_values",
        "previous_sibling": "node_98"
    },
    {
        "dialog_node": "node_101",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:safety",
        "context": {
            "promoted_array": "<?$promoted_array.append(\"safety\")?>"
        },
        "parent": "node_100"
    },
    {
        "dialog_node": "node_102",
        "variable": "$promoted_array",
        "type": "slot",
        "parent": "store_promoted_support_values",
        "previous_sibling": "node_100"
    },
    {
        "dialog_node": "node_103",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:socializing",
        "context": {
            "promoted_array": "<?$promoted_array.append(\"socializing\")?>"
        },
        "parent": "node_102"
    },
    {
        "dialog_node": "node_104",
        "variable": "$promoted_array",
        "type": "slot",
        "parent": "store_promoted_support_values",
        "previous_sibling": "node_102"
    },
    {
        "dialog_node": "node_105",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:time-management",
        "context": {
            "promoted_array": "<?$promoted_array.append(\"time-management\")?>"
        },
        "parent": "node_104"
    },
    {
        "dialog_node": "node_106",
        "variable": "$promoted_array",
        "type": "slot",
        "parent": "store_promoted_support_values",
        "previous_sibling": "node_104"
    },
    {
        "dialog_node": "node_107",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:wealth",
        "context": {
            "promoted_array": "<?$promoted_array.append(\"wealth\")?>"
        },
        "parent": "node_106"
    },
    {
        "dialog_node": "demoted_values_support",
        "title": "Demoted values for support",
        "conditions": "$demoted_support_finished == \"false\" and $promoted_support_finished == \"true\" and $iterator < $support.types.size()",
        "output": {
            "text": {
                "values": [
                    "What values would be negatively supported if: <?$support.types[$iterator].description?>. Choose values in this list: <?$value_list.join(', ')?>.",
                    "What values would be negatively supported if: <?$support.types[$iterator].description?>."
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "repeat": "<? output.text ?>",
            "demoted_array": "<? new JsonArray() ?>"
        },
        "parent": "values_support_intro",
        "previous_sibling": "promoted_values_support",
        "type": "standard"
    },
    {
        "dialog_node": "does_not_know_demoted_support",
        "title": "Does not know or silence",
        "type": "standard",
        "conditions": "#does_not_know || @silence || #LIST_OF_VALUES",
        "output": {
            "text": {
                "values": [
                    "You can choose values in this list: <?$value_list.join(' ,')?>"
                ],
                "selection_policy": "sequential"
            }
        },
        "next_step": {
            "dialog_node": "demoted_values_support",
            "behavior": "jump_to",
            "selector": "body"
        },
        "parent": "demoted_values_support"
    },
    {
        "dialog_node": "no_demoted_support_values",
        "title": "No demoted values (noValues)",
        "type": "standard",
        "conditions": "#does_not_make_sense and !@value",
        "output": {
            "text": {
                "values": [
                    "You said there is no negatively supported value, is that correct?"
                ],
                "selection_policy": "sequential"
            }
        },
        "parent": "demoted_values_support",
        "previous_sibling": "does_not_know_demoted_support"
    },
    {
        "dialog_node": "correct_no_demoted_support_values",
        "title": "Correct - no demoted support values",
        "type": "standard",
        "conditions": "@yes_no == 'yes'",
        "output": {
            "text": {
                "values": [
                    "Ok.",
                    "Ok, thanks."
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "promoted_support_finnished": "false",
            "demoted_support_finnished": "true",
            "iterator": "<?$iterator + 1?>"
        },
        "parent": "no_demoted_support_values"
    },
    {
        "dialog_node": "incorrect_no_demoted_support",
        "title": "Incorrect - no demoted support values",
        "type": "standard",
        "conditions": "anything_else",
        "output": {
            "text": {
                "values": [
                    "No worries, let's try it again."
                ],
                "selection_policy": "sequential"
            }
        },
        "metadata": {},
        "next_step": {
            "dialog_node": "demoted_values_support",
            "behavior": "jump_to",
            "selector": "body"
        },
        "parent": "no_demoted_support_values",
        "previous_sibling": "correct_no_demoted_support_values"
    },
    {
        "dialog_node": "store_demoted_support_values",
        "title": "store demoted support values",
        "type": "frame",
        "conditions": "anything_else",
        "next_step": {
            "dialog_node": "first_child",
            "behavior": "skip_user_input",
            "selector": "user_input"
        },
        "parent": "demoted_values_support",
        "previous_sibling": "no_demoted_support_values"
    },
    {
        "dialog_node": "repeat_demoted_support_values",
        "title": "repeat demoted support values",
        "type": "standard",
        "conditions": "anything_else",
        "output": {},
        "parent": "store_demoted_support_values",
        "digress_out": "allow_all"
    },
    {
        "dialog_node": "only_one_demoted_support",
        "title": "Only one demoted support value",
        "type": "response_condition",
        "conditions": "$demoted_array.size() == 1",
        "output": {
            "text": {
                "values": [
                    "Is value <?$demoted_array.join(', ')?> demoted when <?$support.types[$iterator].short_desc?>?"
                ],
                "selection_policy": "sequential"
            }
        },
        "metadata": {},
        "parent": "repeat_demoted_support_values"
    },
    {
        "dialog_node": "more_demoted_support_values",
        "title": "More demoted support values",
        "type": "response_condition",
        "conditions": "$demoted_array.size() > 1",
        "output": {
            "text": {
                "values": [
                    "Are values <?$demoted_array.join(', ')?> demoted when <?$support.types[$iterator].short_desc?>?"
                ],
                "selection_policy": "sequential"
            }
        },
        "metadata": {},
        "parent": "repeat_demoted_support_values",
        "previous_sibling": "only_one_demoted_support"
    },
    {
        "dialog_node": "correct_all_demoted_support",
        "title": "correct all demoted support values",
        "type": "standard",
        "conditions": "@yes_no == 'yes'",
        "output": {
            "text": {
                "values": [
                    "Thank you.",
                    "Ok, thanks."
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "promoted_support_finnished": "false",
            "demoted_support_finnished": "true",
            "temp": "<?$support.types[$iterator].demoted = $support.types[$iterator].demoted.append($demoted_array)?>",
            "iterator": "<?$iterator + 1?>"
        },
        "next_step": {
            "dialog_node": "promoted_values_support",
            "behavior": "jump_to",
            "selector": "condition"
        },
        "parent": "repeat_demoted_support_values",
        "previous_sibling": "more_demoted_support_values"
    },
    {
        "dialog_node": "incorrect_all_demoted_support",
        "title": "incorrect all demoted support values",
        "type": "standard",
        "conditions": "anything_else",
        "output": {
            "text": {
                "values": [
                    "Sorry, let's try it again.",
                    "No worries, let's try it again."
                ],
                "selection_policy": "sequential"
            }
        },
        "next_step": {
            "dialog_node": "demoted_values_support",
            "behavior": "jump_to",
            "selector": "body"
        },
        "parent": "repeat_demoted_support_values",
        "previous_sibling": "correct_all_demoted_support"
    },
    {
        "dialog_node": "node_108",
        "variable": "$demoted_array",
        "type": "slot",
        "parent": "store_demoted_support_values",
        "previous_sibling": "repeat_demoted_support_values"
    },
    {
        "dialog_node": "node_109",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:comfort",
        "context": {
            "demoted_array": "<?$demoted_array.append(\"comfort\")?>"
        },
        "parent": "node_108"
    },
    {
        "dialog_node": "node_110",
        "variable": "$demoted_array",
        "type": "slot",
        "parent": "store_demoted_support_values",
        "previous_sibling": "node_108"
    },
    {
        "dialog_node": "node_111",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:health",
        "context": {
            "demoted_array": "<?$demoted_array.append(\"health\")?>"
        },
        "parent": "node_110"
    },
    {
        "dialog_node": "node_112",
        "variable": "$demoted_array",
        "type": "slot",
        "parent": "store_demoted_support_values",
        "previous_sibling": "node_110"
    },
    {
        "dialog_node": "node_113",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:independence",
        "context": {
            "demoted_array": "<?$demoted_array.append(\"independence\")?>"
        },
        "parent": "node_112"
    },
    {
        "dialog_node": "node_114",
        "variable": "$demoted_array",
        "type": "slot",
        "parent": "store_demoted_support_values",
        "previous_sibling": "node_112"
    },
    {
        "dialog_node": "node_115",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:safety",
        "context": {
            "demoted_array": "<?$demoted_array.append(\"safety\")?>"
        },
        "parent": "node_114"
    },
    {
        "dialog_node": "node_116",
        "variable": "$demoted_array",
        "type": "slot",
        "parent": "store_demoted_support_values",
        "previous_sibling": "node_114"
    },
    {
        "dialog_node": "node_117",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:socializing",
        "context": {
            "demoted_array": "<?$demoted_array.append(\"socializing\")?>"
        },
        "parent": "node_116"
    },
    {
        "dialog_node": "node_118",
        "variable": "$demoted_array",
        "type": "slot",
        "parent": "store_demoted_support_values",
        "previous_sibling": "node_116"
    },
    {
        "dialog_node": "node_119",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:time-management",
        "context": {
            "demoted_array": "<?$demoted_array.append(\"time-management\")?>"
        },
        "parent": "node_118"
    },
    {
        "dialog_node": "node_120",
        "variable": "$demoted_array",
        "type": "slot",
        "parent": "store_demoted_support_values",
        "previous_sibling": "node_118"
    },
    {
        "dialog_node": "node_121",
        "event_name": "input",
        "type": "event_handler",
        "conditions": "@value:wealth",
        "context": {
            "demoted_array": "<?$demoted_array.append(\"wealth\")?>"
        },
        "parent": "node_120"
    },
    {
        "dialog_node": "all_support_values_done",
        "title": "All support values done",
        "conditions": "$iterator == $support.types.size()",
        "output": {
            "text": {
                "values": [
                    "OK. Thats all from this part."
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "correct": "true"
        },
        "parent": "values_support_intro",
        "previous_sibling": "demoted_values_support",
        "type": "standard"
    },
    {
        "dialog_node": "rating_values_intro",
        "title": "Rating values introduction",
        "conditions": "$command == \"valuerating\"",
        "output": {
            "text": {
                "values": [
                    "You mentioned a <? $value_array.size() ?> values, I will read them one by one and assign a number from 1 to 10 (where 1 is least important and 10 is most important) based on the importance specific value has for you. Can we continue?"
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "example": "For example, I would rate independence with number 10, because its super important for me to be independent.",
            "paraphrase": "I will read you values you said before and you will assign nuber from 1 to 10 based on the importance. Ok?",
            "repeat": "<? output.text ?>",
            "rating_array": "<? new JsonArray() ?>",
            "iterator": 0
        },
        "previous_sibling": "values_support_intro",
        "type": "standard"
    },
    {
        "dialog_node": "rating_question",
        "title": "Rating question",
        "conditions": "$iterator < $value_array.size()",
        "output": {
            "text": {
                "values": [
                    "How important is <? $value_array.get($iterator) ?> for you, on the level from 1 to 10?"
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "repeat": "<? output.text ?>"
        },
        "parent": "rating_values_intro",
        "type": "standard"
    },
    {
        "dialog_node": "rating_in_bounds",
        "title": "Rating in bounds",
        "conditions": "@sys-number and @sys-number > 0 and @sys-number < 11",
        "output": {
            "text": {
                "values": [
                    "Ok, you said @sys-number for <? $value_array.get($iterator) ?> is it correct?"
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "rating": "@sys-number"
        },
        "parent": "rating_question",
        "type": "standard"
    },
    {
        "dialog_node": "rating_correct",
        "title": "Ratign corect",
        "conditions": "@yes_no:yes or input.text.contains('correct')",
        "context": {
            "rating_array": "<? $rating_array.append($rating) ?>",
            "iterator": "<?$iterator + 1?>"
        },
        "next_step": {
            "dialog_node": "rating_question",
            "behavior": "jump_to",
            "selector": "condition"
        },
        "parent": "rating_in_bounds",
        "type": "standard"
    },
    {
        "dialog_node": "rating_incorrect",
        "title": "Ratign incorect",
        "conditions": "@yes_no:no or input.text.contains('not correct')",
        "output": {
            "text": {
                "values": [
                    "Ok, try again."
                ],
                "selection_policy": "sequential"
            }
        },
        "next_step": {
            "dialog_node": "rating_question",
            "behavior": "jump_to",
            "selector": "condition"
        },
        "parent": "rating_in_bounds",
        "previous_sibling": "rating_correct",
        "type": "standard"
    },
    {
        "dialog_node": "rating_out_of_bounds",
        "title": "Rating out of bounds",
        "conditions": "@sys-number",
        "output": {
            "text": {
                "values": [
                    "This was not the number from 1 to 10, we will try it again."
                ],
                "selection_policy": "sequential"
            }
        },
        "next_step": {
            "dialog_node": "rating_question",
            "behavior": "jump_to",
            "selector": "condition"
        },
        "parent": "rating_question",
        "previous_sibling": "rating_in_bounds",
        "type": "standard"
    },
    {
        "dialog_node": "rating_not_number",
        "title": "Rating not number",
        "conditions": "!@sys-number",
        "output": {
            "text": {
                "values": [
                    "Please rate the value on the level from 1 to 10, we will try it again."
                ],
                "selection_policy": "sequential"
            }
        },
        "next_step": {
            "dialog_node": "rating_question",
            "behavior": "jump_to",
            "selector": "condition"
        },
        "parent": "rating_question",
        "previous_sibling": "rating_out_of_bounds",
        "type": "standard"
    },
    {
        "dialog_node": "rating_all_done",
        "title": "Rating all done",
        "conditions": "$iterator == $value_array.size()",
        "output": {
            "text": {
                "values": [
                    "Thats all, thank you."
                ],
                "selection_policy": "sequential"
            }
        },
        "context": {
            "correct": "true"
        },
        "parent": "rating_values_intro",
        "previous_sibling": "rating_question",
        "type": "standard"
    },
    {
        "dialog_node": "node_9_1517569800899",
        "title": "dialog init from the UI",
        "type": "standard",
        "conditions": "$command  == \"init\"",
        "previous_sibling": "rating_values_intro"
    },
    {
        "dialog_node": "node_1_1518710380713",
        "title": "all done",
        "type": "standard",
        "conditions": "$command == \"done\"",
        "output": {
            "text": {
                "values": [
                    "That's it. Now the experiment leader will continue with the rest. Thank you very much for participating."
                ],
                "selection_policy": "sequential"
            }
        },
        "previous_sibling": "node_9_1517569800899"
    },
    {
        "dialog_node": "in_other_cases",
        "title": "In other cases",
        "type": "standard",
        "conditions": "anything_else",
        "output": {
            "text": {
                "values": [
                    "I don't understand, try to reformulate your question.",
                    "Can you ask once again a little different? I did not understand.",
                    "I did not understand what did you ask."
                ],
                "selection_policy": "sequential"
            }
        },
        "previous_sibling": "node_1_1518710380713"
    },
    {
        "dialog_node": "value_list",
        "title": "Value list",
        "conditions": "#LIST_OF_VALUES",
        "output": {
            "text": {
                "values": [
                    "You can choose values in this list: <?$value_list.join(' ,')?>. You can also say none or no value."
                ]
            }
        },
        "previous_sibling": "in_other_cases",
        "type": "standard"
    },
    {
        "dialog_node": "repeat",
        "title": "Repeat",
        "conditions": "#COMMON_REPEAT",
        "next_step": {
            "dialog_node": "first_child",
            "behavior": "skip_user_input",
            "selector": "user_input"
        },
        "previous_sibling": "value_list",
        "digress_in": "returns",
        "type": "standard"
    },
    {
        "dialog_node": "node_61",
        "title": "Repeat not null",
        "conditions": "$repeat != null",
        "output": {
            "text": "<speak>I said: <emphasis level=\"strong\"><? $repeat[0] ?></emphasis></speak>"
        },
        "parent": "repeat",
        "type": "standard"
    },
    {
        "dialog_node": "node_62",
        "title": "Repeat null",
        "conditions": "true",
        "output": {
            "text": "I can't repeat that."
        },
        "parent": "repeat",
        "previous_sibling": "node_61",
        "type": "standard"
    },
    {
        "dialog_node": "paraphrase",
        "title": "Paraphrase",
        "conditions": "#COMMON_PARAPHRASE",
        "context": {
            "repeat": "<? output.text ?>"
        },
        "next_step": {
            "dialog_node": "first_child",
            "behavior": "skip_user_input",
            "selector": "user_input"
        },
        "previous_sibling": "repeat",
        "digress_in": "returns",
        "type": "standard"
    },
    {
        "dialog_node": "node_63",
        "title": "Paraphrase not null",
        "conditions": "$paraphrase != null",
        "output": {
            "text": "<speak><emphasis level=\"moderate\"><? $paraphrase ?></emphasis></speak>"
        },
        "parent": "paraphrase",
        "type": "standard"
    },
    {
        "dialog_node": "node_64",
        "title": "Paraphrase null",
        "conditions": "true",
        "output": {
            "text": "I don't have any more details."
        },
        "parent": "paraphrase",
        "previous_sibling": "node_63",
        "type": "standard"
    },
    {
        "dialog_node": "example",
        "title": "Example",
        "conditions": "#COMMON_EXAMPLE",
        "output": {
            "text": "<? $example != null ? $example : \"I don't have any examples.\" ?>"
        },
        "context": {
            "repeat": "<? output.text ?>"
        },
        "previous_sibling": "paraphrase",
        "digress_in": "returns",
        "type": "standard"
    },
    {
        "dialog_node": "anything_else",
        "title": "Fallback",
        "conditions": "anything_else",
        "context": {
            "repeat": "<? output.text ?>",
            "example": "",
            "paraphrase": ""
        },
        "next_step": {
            "dialog_node": "first_child",
            "behavior": "skip_user_input",
            "selector": "user_input"
        },
        "previous_sibling": "example",
        "type": "standard"
    },
    {
        "dialog_node": "node_65",
        "title": "Anything else",
        "conditions": "anything_else",
        "output": {
            "text": {
                "values": [
                    "What, please?",
                    "Say that again, please.",
                    "Once more, please."
                ],
                "selection_policy": "random"
            }
        },
        "context": {
            "repeat": "<? output.text ?>",
            "example": "",
            "paraphrase": "I'm saying that I did not undestand you, try it again."
        },
        "parent": "anything_else",
        "type": "standard"
    }
]